love = {
    _version_codename = "Mysterious Mysteries",
    getVersion = function() end,
    _os = "Linux",
    _modules = {
        font = {},
        mouse = {},
        image = {},
        system = {},
        audio = {},
        touch = {},
        physics = {},
        joystick = {},
        math = {},
        timer = {},
        graphics = {},
        filesystem = {},
        thread = {},
        data = {},
        event = {},
        window = {},
        keyboard = {},
        video = {},
        sound = {},
    },
    _version = "11.3",
    init = function() end,
    threaderror = function() end,
    arg = {
        parseOption = function() end,
        optionIndices = {
            true,
        },
        options = {
            fused = {
                a = 0,
            },
            console = {
                a = 0,
            },
            game = {
                arg = {
                    ".",
                },
                a = 1,
                set = true,
            },
        },
        parseOptions = function() end,
        parseGameArguments = function() end,
        getLow = function() end,
    },
    _version_revision = 0,
    _deprecation = {},
    event = {
        clear = function() end,
        pump = function() end,
        poll = function() end,
        push = function() end,
        wait = function() end,
        poll_i = function() end,
        quit = function() end,
    },
    _version_minor = 3,
    _version_major = 11,
    physics = {
        newMouseJoint = function() end,
        newPulleyJoint = function() end,
        newFixture = function() end,
        setMeter = function() end,
        getMeter = function() end
,
        newWheelJoint = function() end,
        newRectangleShape = function() end,
        newFrictionJoint = function() end,
        getDistance = function() end,
        newMotorJoint = function() end,
        newRopeJoint = function() end,
        newBody = function() end,
        newRevoluteJoint = function() end,
        newEdgeShape = function() end,
        newWorld = function() end,
        newPrismaticJoint = function() end,
        newPolygonShape = function() end,
        newWeldJoint = function() end,
        newGearJoint = function() end,
        newDistanceJoint = function() end,
        newCircleShape = function() end,
        newChainShape = function() end,
    },
    math = {
        randomNormal = function() end,
        colorToBytes = function() end,
        isConvex = function() end,
        setRandomState = function() end,
        compress = function() end,
        triangulate = function() end,
        newTransform = function() end,
        noise = function() end,
        getRandomSeed = function() end,
        newRandomGenerator = function() end,
        setRandomSeed = function() end,
        linearToGamma = function() end,
        colorFromBytes = function() end,
        gammaToLinear = function() end,
        getRandomState = function() end,
        random = function() end,
        _getRandomGenerator = function() end,
        decompress = function() end,
        newBezierCurve = function() end,
    },
    _exe = true,
    setDeprecationOutput = function() end,
    _requestRecordingPermission = function() end,
    _version_compat = {
        "11.3",
        "11.0",
        "11.1",
        "11.2",
    },
    window = {
        fromPixels = function() end,
        toPixels = function() end,
        getDisplayName = function() end,
        isOpen = function() end,
        getVSync = function() end,
        getTitle = function() end,
        minimize = function() end,
        updateMode = function() end,
        isDisplaySleepEnabled = function() end,
        getNativeDPIScale = function() end,
        isMaximized = function() end,
        restore = function() end,
        setFullscreen = function() end,
        getDisplayOrientation = function() end,
        requestAttention = function() end,
        isVisible = function() end,
        getFullscreen = function() end,
        getDisplayCount = function() end,
        isMinimized = function() end,
        setMode = function() end,
        setTitle = function() end,
        setDisplaySleepEnabled = function() end,
        getMode = function() end,
        
getSafeArea = function() end,
        setIcon = function() end,
        getFullscreenModes = function() end,
        getDPIScale = function() end,
        hasMouseFocus = function() end,
        getPosition = function() end,
        close = function() end,
        setVSync = function() end,
        getIcon = function() end,
        setPosition = function() end,
        showMessageBox = function() end,
        getDesktopDimensions = function() end,
        maximize = function() end,
        hasFocus = function() end,
    },
    _setAudioMixWithSystem = function() end,
    conf = function() end,
    run = function() end,
    mouse = {
        setX = function() end,
        getSystemCursor = function() end,
        isGrabbed = function() end,
        isVisible = function() end,
        newCursor = function() end,
        setVisible = function() end,
        getRelativeMode = function() end,
        setGrabbed = function() end,
        setCursor = function() end,
        getPosition = function() end,
        getCursor = function() end,
        isCursorSupported = function() end,
        setY = function() end,
        setPosition = function() end,
        getX = function() end,
        getY = function() end,
        isDown = function() end,
        setRelativeMode = function() end,
    },
    image = {
        newCubeFaces = function() end,
        isCompressed = function() end,
        newImageData = function() end,
        newCompressedData = function() end,
    },
    isVersionCompatible = function() end,
    errhand = function() end,
    font = {
        newImageRasterizer = function() end,
        newGlyphData = function() end,
        newTrueTypeRasterizer = function() end,
        newBMFontRasterizer = function() end,
        newRasterizer = function() end,
    },
    boot = function() end,
    audio = {
        stop = function() end,
        setVelocity = function() end,
        getSourceCount = function() end,
        getActiveEffects = function() end,
        getActiveSourceCount = function() end,
        setVolume = function() end,
        getDopplerScale = function() end,
        setMixWithSystem = function() end,
        play = function() end,
        setOrientation = function() end,
        isEffectsSupported = function() end,
        getMaxSourceEffects = function() end,
        getMaxSceneEffects = function() end,
        getEffect = function() end,
        newSource = function() end,
        pause = function() end,
        setDistanceModel = function() end,
        getRecordingDevices = function() end,
        getVelocity = function() end,
        newQueueableSource = function() end,
        getDistanceModel = function() end,
        getOrientation = function() end,
        setPosition = function() end,
        setEffect = function() end,
        getPosition = function() end,
        getVolume = function() end,
        setDopplerScale = function() end,
    },
    system = {
        hasBackgroundMusic = function() end,
        setClipboardText = function() end,
        vibrate = function() end,
        openURL = function() end,
        getPowerInfo = function() end,
        getClipboardText = function() end,
        getOS = function() end,
        getProcessorCount = function() end,
    },
    _setGammaCorrect = function() end,
    hasDeprecationOutput = function() end,
    touch = {
        getPressure = function() end,
        getTouches = function() end,
        getPosition = function() end,
    },
    filesystem = {
        unmount = function() end,
        write = function() end,
        setIdentity = function() end,
        setCRequirePath = function() end,
        _setAndroidSaveExternal = function() end,
        getExecutablePath = function() end,
        getCRequirePath = function() end,
        init = function() end,
        newFileData = function() end,
        isSymlink = function() end,
        append = function() end,
        getUserDirectory = function() end,
        createDirectory = function() end,
        getInfo = function() end,
        areSymlinksEnabled = function() end,
        exists = function() end,
        newFile = function() end,
        getSaveDirectory = function() end,
        mount = function() end,
        getRequirePath = function() end,
        getWorkingDirectory = function() end,
        getSize = function() end,
        setRequirePath = function() end,
        isFused = function() end,
        getDirectoryItems = function() end,
        setSource = function() end,
        getLastModified = function() end,
        isFile = function() end,
        isDirectory = function() end,
        getIdentity = function() end,
        setFused = function() end,
        getAppdataDirectory = function() end,
        lines = function() end,
        load = function() end,
        remove = function() end,
        getSource = function() end,
        getRealDirectory = function() end,
        read = function() end,
        setSymlinksEnabled = function() end,
        getSourceBaseDirectory = function() end,
    },
    joystick = {
        saveGamepadMappings = function() end,
     
   setGamepadMapping = function() end,
        loadGamepadMappings = function() end,
        getJoystickCount = function() end,
        getGamepadMappingString = function() end,
        getJoysticks = function() end,
    },
    timer = {
        step = function() end,
        getDelta = function() end,
        getTime = function() end,
        getAverageDelta = function() end,
        sleep = function() end,
        getFPS = function() end,
    },
    graphics = {
        getTextureTypes = function() end,
        setDefaultMipmapFilter = function() end,
        getStats = function() end,
        newParticleSystem = function() end,
        setFont = function() end,
        newQuad = function() end,
        getDefaultFilter = function() end,
        inverseTransformPoint = function() end,
        getStackDepth = function() end,
        setDefaultFilter = function() end,
        shear = function() end,
        translate = function() end,
        print = function() end,
        newShader = function() end,
        getPixelWidth = function() end,
        getBlendMode = function() end,
        newMesh = function() end,
        getMeshCullMode = function() end,
        present = function() end,
        drawLayer = function() end,
        newVolumeImage = function() end,
        scale = function() end,
        getLineStyle = function() end,
        setBlendMode = function() end,
        getImageFormats = function() end,
        getLineJoin = function() end,
        draw = function() end,
        getFont = function() end,
        setMeshCullMode = function() end,
        getDepthMode = function() end,
        setStencilTest = function() end,
        getFrontFaceWinding = function() end,
        getDPIScale = function() end,
        getCanvasFormats = function() end,
        discard = function() end,
        _shaderCodeToGLSL = function() end,
        newVideo = function() end,
        newImageFont = function() end,
        origin = function() end,
        push = function() end,
        newArrayImage = function() end,
        clear = function() end,
        getHeight = function() end,
        setFrontFaceWinding = function() end,
        reset = function() end,
        newSpriteBatch = function() end,
        newImage = function() end,
        rectangle = function() end,
        isCreated = function() end,
        stencil = function() end,
        getShader = function() end,
        setNewFont = function() end,
        pop = function() end,
        flushBatch = function() end,
        getScissor = function() end,
        polygon = function() end,
        arc = function() end,
        ellipse = function() end,
        circle = function() end,
        _newVideo = function() end,
        newCubeImage = function() end,
        setColor = function() end,
        line = function() end,
        points = function() end,
        setBackgroundColor = function() end,
        setColorMask = function() end,
        setLineStyle = function() end,
        getStencilTest = function() end,
        _transformGLSLErrorMessages = function() end,
        getRendererInfo = function() end,
        isActive = function() end,
        rotate = function() end,
        intersectScissor = function() end,
        setScissor = function() end,
        printf = function() end,
        getPixelHeight = function() end,
        getDimensions = function() end,
        replaceTransform = function() end,
        captureScreenshot = function() end,
        getWidth = function() end,
        isGammaCorrect = function() end,
        setPointSize = function() end,
        getPixelDimensions = function() end,
        drawInstanced = function() end,
        getColorMask = function() end,
        transformPoint = function() end,
        setLineWidth = function() end,
        newCanvas = function() end,
        setDepthMode = function() end,
        getColor = function() end,
        validateShader = function() end,
        getDefaultMipmapFilter = function() end,
        getSystemLimits = function() end,
        applyTransform = function() end,
        setShader = function() end,
        setLineJoin = function() end,
        newFont = function() end,
        setCanvas = function() end,
        getLineWidth = function() end,
        newText = function() end,
        getPointSize = function() end,
        getBackgroundColor = function() end,
        setWireframe = function() end,
        isWireframe = function() end,
        _setDefaultShaderCode = function() end,
        getCanvas = function() end,
        getSupported = function() end,
    },
    path = {
        getFull = function() end,
        endslash = function() end,
        abs = function() end,
        normalslashes = function() end,
        leaf = function() end,
    },
    thread = {
        getChannel = function() end,
        newThread = function() end,
        newChannel = function() end,
    },
    data = {
        newByteData = function() end,
        encode = function() end,
        hash = function() end,
        compress = function() end,
        getPackedSize = function() end,

        decode = function() end,
        unpack = function() end,
        newDataView = function() end,
        decompress = function() end,
        pack = function() end,
    },
    handlers = {
        gamepadreleased = function() end,
        focus = function() end,
        displayrotated = function() end,
        touchpressed = function() end,
        lowmemory = function() end,
        quit = function() end,
        textinput = function() end,
        wheelmoved = function() end,
        resize = function() end,
        directorydropped = function() end,
        touchreleased = function() end,
        joystickhat = function() end,
        joystickaxis = function() end,
        joystickpressed = function() end,
        threaderror = function() end,
        gamepadpressed = function() end,
        visible = function() end,
        joystickreleased = function() end,
        joystickremoved = function() end,
        gamepadaxis = function() end,
        textedited = function() end,
        mousefocus = function() end,
        filedropped = function() end,
        mousepressed = function() end,
        keyreleased = function() end,
        touchmoved = function() end,
        mousemoved = function() end,
        joystickadded = function() end,
        mousereleased = function() end,
        keypressed = function() end,
    },
    sound = {
        newSoundData = function() end,
        newDecoder = function() end,
    },
    keyboard = {
        setTextInput = function() end,
        hasTextInput = function() end,
        getScancodeFromKey = function() end,
        hasScreenKeyboard = function() end,
        setKeyRepeat = function() end,
        getKeyFromScancode = function() end,
        isDown = function() end,
        hasKeyRepeat = function() end,
        isScancodeDown = function() end,
    },
    video = {
        newVideoStream = function() end,
    },
    createhandlers = function() end,
}